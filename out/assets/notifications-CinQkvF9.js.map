{"version":3,"file":"notifications-CinQkvF9.js","sources":["../../src/lib/notifications.ts"],"sourcesContent":["// Browser Push Notification Service\n// Handles desktop notifications for admin order alerts\n\nexport interface NotificationOptions {\n  title: string;\n  body: string;\n  icon?: string;\n  badge?: string;\n  tag?: string;\n  requireInteraction?: boolean;\n  silent?: boolean;\n  data?: any;\n}\n\nexport class NotificationService {\n  private static instance: NotificationService;\n  private isSupported: boolean;\n  private permission: NotificationPermission;\n\n  private constructor() {\n    this.isSupported = 'Notification' in window;\n    this.permission = this.isSupported ? Notification.permission : 'denied';\n  }\n\n  public static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  /**\n   * Check if browser supports notifications\n   */\n  public isNotificationSupported(): boolean {\n    return this.isSupported;\n  }\n\n  /**\n   * Get current notification permission status\n   */\n  public getPermission(): NotificationPermission {\n    return this.permission;\n  }\n\n  /**\n   * Request notification permission from user\n   */\n  public async requestPermission(): Promise<NotificationPermission> {\n    if (!this.isSupported) {\n      console.warn('Browser does not support notifications');\n      return 'denied';\n    }\n\n    if (this.permission === 'granted') {\n      return 'granted';\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      return permission;\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return 'denied';\n    }\n  }\n\n  /**\n   * Show a desktop notification\n   */\n  public async showNotification(options: NotificationOptions): Promise<Notification | null> {\n    // Check if notifications are supported and permitted\n    if (!this.isSupported) {\n      console.warn('Notifications not supported');\n      return null;\n    }\n\n    if (this.permission !== 'granted') {\n      console.warn('Notification permission not granted');\n      return null;\n    }\n\n    try {\n      const notification = new Notification(options.title, {\n        body: options.body,\n        icon: options.icon || '/favicon.ico',\n        badge: options.badge || '/favicon.ico',\n        tag: options.tag || 'boki-notification',\n        requireInteraction: options.requireInteraction || true,\n        silent: options.silent || false,\n        data: options.data || {}\n      });\n\n      // Auto-close notification after 10 seconds if not requiring interaction\n      if (!options.requireInteraction) {\n        setTimeout(() => {\n          notification.close();\n        }, 10000);\n      }\n\n      return notification;\n    } catch (error) {\n      console.error('Error showing notification:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Show notification for new order\n   */\n  public async showNewOrderNotification(orderData: {\n    orderId: string;\n    customerName: string;\n    totalAmount: number;\n    orderType: string;\n  }): Promise<Notification | null> {\n    const { orderId, customerName, totalAmount, orderType } = orderData;\n    \n    return this.showNotification({\n      title: 'üçΩÔ∏è New Order Received!',\n      body: `Order #${orderId.slice(-4)} from ${customerName}\\n‚Ç±${totalAmount.toFixed(2)} ‚Ä¢ ${orderType}`,\n      icon: '/favicon.ico',\n      tag: `new-order-${orderId}`,\n      requireInteraction: true,\n      data: {\n        type: 'new_order',\n        orderId,\n        customerName,\n        totalAmount,\n        orderType,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Show notification for order status update\n   */\n  public async showOrderUpdateNotification(orderData: {\n    orderId: string;\n    customerName: string;\n    status: string;\n    previousStatus: string;\n  }): Promise<Notification | null> {\n    const { orderId, customerName, status, previousStatus } = orderData;\n    \n    const statusEmojis: Record<string, string> = {\n      'preparing': 'üë®‚Äçüç≥',\n      'ready': '‚úÖ',\n      'out_for_delivery': 'üöö',\n      'completed': 'üéâ',\n      'cancelled': '‚ùå'\n    };\n\n    const emoji = statusEmojis[status] || 'üìã';\n    \n    return this.showNotification({\n      title: `${emoji} Order Status Updated`,\n      body: `Order #${orderId.slice(-4)} (${customerName})\\n${previousStatus} ‚Üí ${status}`,\n      icon: '/favicon.ico',\n      tag: `order-update-${orderId}`,\n      requireInteraction: false,\n      data: {\n        type: 'order_update',\n        orderId,\n        customerName,\n        status,\n        previousStatus,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Check if notifications are enabled in browser settings\n   */\n  public isEnabled(): boolean {\n    return this.isSupported && this.permission === 'granted';\n  }\n\n  /**\n   * Get notification settings info for UI display\n   */\n  public getNotificationInfo(): {\n    supported: boolean;\n    permission: NotificationPermission;\n    enabled: boolean;\n    canRequest: boolean;\n  } {\n    return {\n      supported: this.isSupported,\n      permission: this.permission,\n      enabled: this.isEnabled(),\n      canRequest: this.permission === 'default'\n    };\n  }\n}\n\n// Export singleton instance\nexport const notificationService = NotificationService.getInstance();"],"names":["_NotificationService","__publicField","permission","error","options","notification","orderData","orderId","customerName","totalAmount","orderType","status","previousStatus","emoji","NotificationService","notificationService"],"mappings":"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"}