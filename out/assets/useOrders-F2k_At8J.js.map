{"version":3,"file":"useOrders-F2k_At8J.js","sources":["../../src/hooks/useOrders.ts"],"sourcesContent":["\nimport { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from './useAuth';\n\ninterface Order {\n  id: string;\n  user_id: string | null;\n  customer_name: string;\n  customer_email: string | null;\n  customer_phone: string;\n  customer_address: string | null;\n  order_type: 'delivery' | 'pickup';\n  payment_method: 'cash' | 'card' | 'online';\n  status: 'pending' | 'preparing' | 'ready' | 'out_for_delivery' | 'completed' | 'cancelled';\n  total_amount: number;\n  notes: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface OrderItem {\n  id: string;\n  order_id: string;\n  food_item_id: string | null;\n  quantity: number;\n  unit_price: number;\n  total_price: number;\n  size_option_id?: string | null;\n  size_name?: string | null;\n  size_multiplier?: number | null;\n  created_at: string;\n  food_items?: {\n    name: string;\n    image_url: string | null;\n  };\n}\n\ninterface OrderStatusHistory {\n  id: string;\n  order_id: string;\n  status: string;\n  changed_by: string | null;\n  notes: string | null;\n  created_at: string;\n  users?: {\n    full_name: string;\n  };\n}\n\ninterface OrderWithItems extends Order {\n  order_items: OrderItem[];\n  order_status_history?: OrderStatusHistory[];\n}\n\nexport const useOrders = () => {\n  const { user } = useAuth();\n  const [orders, setOrders] = useState<OrderWithItems[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchOrders = useCallback(async () => {\n    try {\n      setIsLoading(true);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { data, error } = await supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            *,\n            food_items (\n              name,\n              image_url\n            )\n          ),\n          order_status_history (\n            *,\n            users (\n              full_name\n            )\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setOrders(data || []);\n\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  const fetchUserOrders = useCallback(async (userId: string) => {\n    try {\n      // Set user context for RLS\n      await supabase.rpc('set_user_context', { \n        user_id: userId, \n        user_role: user?.role || 'customer'\n      });\n\n      const { data, error } = await supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            *,\n            food_items (\n              name,\n              image_url\n            )\n          ),\n          order_status_history (\n            *,\n            users (\n              full_name\n            )\n          )\n        `)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n\n    } catch (error) {\n      console.error('Error fetching user orders:', error);\n      return [];\n    }\n  }, [user]);\n\n  useEffect(() => {\n    fetchOrders();\n    \n    // Subscribe to real-time updates\n    const subscription = supabase\n      .channel('orders')\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'orders' },\n        () => {\n          fetchOrders();\n        }\n      )\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'order_status_history' },\n        () => {\n          fetchOrders();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [fetchOrders]);\n\n  const updateOrderStatus = async (orderId: string, status: Order['status'], notes?: string) => {\n    try {\n      // Set user context for RLS\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      // Update order status\n      const { error: orderError } = await supabase\n        .from('orders')\n        .update({ \n          status,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', orderId);\n\n      if (orderError) throw orderError;\n\n      // Add status history entry\n      const { error: historyError } = await supabase\n        .from('order_status_history')\n        .insert({\n          order_id: orderId,\n          status,\n          changed_by: user?.id || null,\n          notes: notes || `Status changed to ${status}`\n        });\n\n      if (historyError) throw historyError;\n      \n      // Refresh orders\n      await fetchOrders();\n\n    } catch (error) {\n      console.error('Error updating order status:', error);\n      throw error;\n    }\n  };\n\n  const getOrderById = async (orderId: string) => {\n    try {\n      // Set user context for RLS\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { data, error } = await supabase\n        .from('orders')\n        .select(`\n          *,\n          order_items (\n            *,\n            food_items (\n              name,\n              image_url\n            )\n          ),\n          order_status_history (\n            *,\n            users (\n              full_name\n            )\n          )\n        `)\n        .eq('id', orderId)\n        .single();\n\n      if (error) throw error;\n      return data;\n\n    } catch (error) {\n      console.error('Error fetching order:', error);\n      return null;\n    }\n  };\n\n  const getTodayStats = () => {\n    const today = new Date().toISOString().split('T')[0];\n    const todayOrders = orders.filter(order => \n      order.created_at.startsWith(today)\n    );\n\n    return {\n      totalOrders: todayOrders.length,\n      totalSales: todayOrders.reduce((sum, order) => sum + order.total_amount, 0),\n      pendingOrders: todayOrders.filter(order => order.status === 'pending').length,\n      preparingOrders: todayOrders.filter(order => order.status === 'preparing').length,\n      readyOrders: todayOrders.filter(order => order.status === 'ready').length,\n      outForDeliveryOrders: todayOrders.filter(order => order.status === 'out_for_delivery').length,\n      completedOrders: todayOrders.filter(order => order.status === 'completed').length,\n      cancelledOrders: todayOrders.filter(order => order.status === 'cancelled').length,\n    };\n  };\n\n  const getOrdersByStatus = (status: Order['status']) => {\n    return orders.filter(order => order.status === status);\n  };\n\n  const getOrderStatusHistory = (orderId: string) => {\n    const order = orders.find(o => o.id === orderId);\n    return order?.order_status_history || [];\n  };\n\n  const getAllOrderStatuses = () => {\n    return ['pending', 'preparing', 'ready', 'out_for_delivery', 'completed', 'cancelled'] as const;\n  };\n\n  return {\n    orders,\n    isLoading,\n    fetchOrders,\n    fetchUserOrders,\n    updateOrderStatus,\n    getOrderById,\n    getTodayStats,\n    getOrdersByStatus,\n    getOrderStatusHistory,\n    getAllOrderStatuses,\n  };\n};\n"],"names":["useOrders","user","useAuth","orders","setOrders","useState","isLoading","setIsLoading","fetchOrders","useCallback","supabase","data","error","fetchUserOrders","userId","useEffect","subscription","orderId","status","notes","orderError","historyError","today","todayOrders","order","sum","o"],"mappings":"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"}