{"version":3,"file":"page-C37Tc7qx.js","sources":["../../src/pages/admin/dashboard/page.tsx"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../../hooks/useAuth';\r\nimport { supabase } from '../../../lib/supabase';\r\nimport Button from '../../../components/base/Button';\r\nimport { formatPesoSimple } from '../../../lib/currency';\r\nimport AdminSidebar from '../../../components/feature/AdminSidebar';\r\nimport { notificationService } from '../../../lib/notifications';\r\n\r\nconst AdminDashboard = () => {\r\n  const navigate = useNavigate();\r\n  const { user, isLoading, isAuthenticated, isAdmin } = useAuth();\r\n  const [stats, setStats] = useState({\r\n    totalOrders: 0,\r\n    pendingOrders: 0,\r\n    totalRevenue: 0,\r\n    totalMenuItems: 0,\r\n    todayOrders: 0,\r\n    todaySales: 0,\r\n    completedOrders: 0\r\n  });\r\n  const [recentOrders, setRecentOrders] = useState<any[]>([]);\r\n  const [notifications, setNotifications] = useState<any[]>([]);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Wait for auth to load before checking\r\n    if (isLoading) return;\r\n\r\n    // If not authenticated or not admin, redirect to login\r\n    if (!isAuthenticated || !isAdmin) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    // Initialize notification service and check permissions\r\n    setupOrderNotifications();\r\n    \r\n    fetchDashboardData();\r\n  }, [isAuthenticated, isAdmin, isLoading, navigate]);\r\n\r\n  // Set up real-time order notifications\r\n  const setupOrderNotifications = () => {\r\n    // Subscribe to new orders\r\n    const subscription = supabase\r\n      .channel('admin-order-notifications')\r\n      .on('postgres_changes', \r\n        { \r\n          event: 'INSERT', \r\n          schema: 'public', \r\n          table: 'orders' \r\n        },\r\n        async (payload) => {\r\n          const newOrder = payload.new as any;\r\n          \r\n          // Show push notification for new order\r\n          if (notificationService.isEnabled()) {\r\n            await notificationService.showNewOrderNotification({\r\n              orderId: newOrder.id,\r\n              customerName: newOrder.customer_name,\r\n              totalAmount: parseFloat(newOrder.total_amount),\r\n              orderType: newOrder.order_type\r\n            });\r\n          }\r\n\r\n          // Refresh dashboard data\r\n          fetchDashboardData();\r\n        }\r\n      )\r\n      .on('postgres_changes', \r\n        { \r\n          event: 'UPDATE', \r\n          schema: 'public', \r\n          table: 'orders' \r\n        },\r\n        async (payload) => {\r\n          const updatedOrder = payload.new as any;\r\n          const oldOrder = payload.old as any;\r\n          \r\n          // Show push notification for status updates (except for new orders)\r\n          if (notificationService.isEnabled() && \r\n              updatedOrder.status !== oldOrder.status && \r\n              oldOrder.status !== 'pending') {\r\n            await notificationService.showOrderUpdateNotification({\r\n              orderId: updatedOrder.id,\r\n              customerName: updatedOrder.customer_name,\r\n              status: updatedOrder.status,\r\n              previousStatus: oldOrder.status\r\n            });\r\n          }\r\n\r\n          // Refresh dashboard data\r\n          fetchDashboardData();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Clean up subscription on component unmount\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  };\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch orders data\r\n      const { data: orders, error: ordersError } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (ordersError) throw ordersError;\r\n\r\n      // Fetch food items count\r\n      const { data: foodItems, error: foodItemsError } = await supabase\r\n        .from('food_items')\r\n        .select('id');\r\n\r\n      if (foodItemsError) throw foodItemsError;\r\n\r\n      // Calculate stats\r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n\r\n      const todayOrders = orders?.filter(order => \r\n        new Date(order.created_at) >= today\r\n      ) || [];\r\n\r\n      const pendingOrders = orders?.filter(order => \r\n        order.status === 'pending' || order.status === 'preparing'\r\n      ) || [];\r\n\r\n      const completedOrders = orders?.filter(order => \r\n        order.status === 'completed'\r\n      ) || [];\r\n\r\n      // Exclude cancelled orders from revenue calculations\r\n      const nonCancelledOrders = orders?.filter(order => order.status !== 'cancelled') || [];\r\n      const totalRevenue = nonCancelledOrders.reduce((sum, order) => \r\n        sum + parseFloat(order.total_amount || 0), 0\r\n      ) || 0;\r\n\r\n      // Exclude cancelled orders from today's sales\r\n      const todayNonCancelledOrders = todayOrders.filter(order => order.status !== 'cancelled');\r\n      const todaySales = todayNonCancelledOrders.reduce((sum, order) => \r\n        sum + parseFloat(order.total_amount || 0), 0\r\n      );\r\n\r\n      setStats({\r\n        totalOrders: orders?.length || 0,\r\n        pendingOrders: pendingOrders.length,\r\n        totalRevenue,\r\n        totalMenuItems: foodItems?.length || 0,\r\n        todayOrders: todayOrders.length,\r\n        todaySales,\r\n        completedOrders: completedOrders.length\r\n      });\r\n\r\n      // Set recent orders (last 5)\r\n      setRecentOrders(orders?.slice(0, 5) || []);\r\n\r\n      // Generate notifications based on recent orders\r\n      const recentNotifications = orders?.slice(0, 3).map((order, index) => ({\r\n        id: order.id,\r\n        type: order.status === 'pending' ? 'new_order' : 'order_update',\r\n        message: order.status === 'pending' \r\n          ? `New order #${order.id.slice(-4)} received`\r\n          : `Order #${order.id.slice(-4)} ${order.status}`,\r\n        time: getTimeAgo(order.created_at),\r\n        unread: index < 2\r\n      })) || [];\r\n\r\n      setNotifications(recentNotifications);\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTimeAgo = (dateString: string) => {\r\n    const now = new Date();\r\n    const date = new Date(dateString);\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes} min ago`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hour${Math.floor(diffInMinutes / 60) > 1 ? 's' : ''} ago`;\r\n    return `${Math.floor(diffInMinutes / 1440)} day${Math.floor(diffInMinutes / 1440) > 1 ? 's' : ''} ago`;\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      case 'preparing': return 'bg-blue-100 text-blue-800';\r\n      case 'ready': return 'bg-purple-100 text-purple-800';\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const markNotificationRead = (id: string) => {\r\n    setNotifications(notifications.map(notif => \r\n      notif.id === id ? { ...notif, unread: false } : notif\r\n    ));\r\n  };\r\n\r\n  const markAllNotificationsRead = () => {\r\n    setNotifications(notifications.map(notif => ({ ...notif, unread: false })));\r\n  };\r\n\r\n  // Show loading while checking authentication\r\n  if (isLoading || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Don't render if not authenticated or not admin\r\n  if (!isAuthenticated || !isAdmin) {\r\n    return null;\r\n  }\r\n\r\n  const quickActions = [\r\n    {\r\n      title: 'Point of Sale',\r\n      description: 'Process dine-in and walk-in orders',\r\n      icon: 'ri-cash-line',\r\n      path: '/admin/pos',\r\n      color: 'bg-green-500'\r\n    },\r\n    {\r\n      title: 'Manage Orders',\r\n      description: 'View and update order status',\r\n      icon: 'ri-shopping-bag-line',\r\n      path: '/admin/orders',\r\n      color: 'bg-blue-500'\r\n    },\r\n    {\r\n      title: 'Manage Menu',\r\n      description: 'Add, edit, or remove menu items',\r\n      icon: 'ri-restaurant-line',\r\n      path: '/admin/menu',\r\n      color: 'bg-orange-500'\r\n    },\r\n    {\r\n      title: 'View Reports',\r\n      description: 'Sales and performance analytics',\r\n      icon: 'ri-bar-chart-line',\r\n      path: '/admin/reports',\r\n      color: 'bg-purple-500'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex\">\r\n      <AdminSidebar />\r\n      \r\n      <div className=\"flex-1 ml-64\">\r\n        {/* Header */}\r\n        <div className=\"bg-white shadow-sm border-b border-gray-200\">\r\n          <div className=\"px-6 py-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\r\n                <p className=\"text-gray-600\">Welcome back, {user?.full_name || user?.email}</p>\r\n              </div>\r\n              \r\n              {/* Notifications */}\r\n              <div className=\"relative\">\r\n                <button \r\n                  onClick={() => setShowNotifications(!showNotifications)}\r\n                  className=\"relative p-2 text-gray-600 hover:text-gray-900\"\r\n                >\r\n                  <i className=\"ri-notification-line text-xl\"></i>\r\n                  {notifications.some(n => n.unread) && (\r\n                    <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\r\n                  )}\r\n                </button>\r\n\r\n                {/* Notifications Dropdown */}\r\n                {showNotifications && (\r\n                  <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\r\n                    <div className=\"p-4 border-b border-gray-200\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <h3 className=\"font-semibold text-gray-900\">Notifications</h3>\r\n                        {notifications.some(n => n.unread) && (\r\n                          <button\r\n                            onClick={markAllNotificationsRead}\r\n                            className=\"text-sm text-orange-600 hover:text-orange-700\"\r\n                          >\r\n                            Mark all read\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"max-h-64 overflow-y-auto\">\r\n                      {notifications.length > 0 ? (\r\n                        notifications.map((notification) => (\r\n                          <div\r\n                            key={notification.id}\r\n                            className={`p-3 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${\r\n                              notification.unread ? 'bg-orange-50' : ''\r\n                            }`}\r\n                            onClick={() => markNotificationRead(notification.id)}\r\n                          >\r\n                            <div className=\"flex items-start\">\r\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\r\n                                notification.type === 'new_order' ? 'bg-green-100' : 'bg-blue-100'\r\n                              }`}>\r\n                                <i className={`${\r\n                                  notification.type === 'new_order' ? 'ri-shopping-bag-line text-green-600' : 'ri-refresh-line text-blue-600'\r\n                                } text-sm`}></i>\r\n                              </div>\r\n                              <div className=\"flex-1\">\r\n                                <p className=\"text-sm font-medium text-gray-900\">{notification.message}</p>\r\n                                <p className=\"text-xs text-gray-600\">{notification.time}</p>\r\n                              </div>\r\n                              {notification.unread && (\r\n                                <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <div className=\"p-4 text-center text-gray-500\">\r\n                          <i className=\"ri-notification-off-line text-2xl mb-2\"></i>\r\n                          <p className=\"text-sm\">No notifications</p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <div className=\"p-3 border-t border-gray-200\">\r\n                      <button className=\"w-full text-center text-sm text-orange-600 hover:text-orange-700\">\r\n                        View all notifications\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Overlay to close dropdown */}\r\n                {showNotifications && (\r\n                  <div \r\n                    className=\"fixed inset-0 z-40\" \r\n                    onClick={() => setShowNotifications(false)}\r\n                  ></div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"p-6\">\r\n          {/* Stats Cards */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4\">\r\n                  <i className=\"ri-shopping-bag-line text-xl text-blue-600\"></i>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Today's Orders</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.todayOrders}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\r\n                  <i className=\"ri-money-dollar-circle-line text-xl text-green-600\"></i>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Today's Sales</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatPesoSimple(stats.todaySales)}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mr-4\">\r\n                  <i className=\"ri-time-line text-xl text-orange-600\"></i>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Pending Orders</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.pendingOrders}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4\">\r\n                  <i className=\"ri-check-line text-xl text-purple-600\"></i>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-gray-600\">Completed Orders</p>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.completedOrders}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Quick Actions */}\r\n            <div className=\"lg:col-span-2\">\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n                <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Quick Actions</h2>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  {quickActions.map((action, index) => (\r\n                    <button\r\n                      key={index}\r\n                      onClick={() => navigate(action.path)}\r\n                      className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 text-left transition-colors\"\r\n                    >\r\n                      <div className={`w-10 h-10 ${action.color} rounded-lg flex items-center justify-center mb-3`}>\r\n                        <i className={`${action.icon} text-white`}></i>\r\n                      </div>\r\n                      <h3 className=\"font-semibold text-gray-900 mb-1\">{action.title}</h3>\r\n                      <p className=\"text-sm text-gray-600\">{action.description}</p>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Recent Orders */}\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <div className=\"flex items-center justify-between mb-6\">\r\n                  <h2 className=\"text-xl font-bold text-gray-900\">Recent Orders</h2>\r\n                  <Button\r\n                    onClick={() => navigate('/admin/orders')}\r\n                    variant=\"outline\"\r\n                    className=\"text-sm px-4 py-2 whitespace-nowrap\"\r\n                  >\r\n                    View All\r\n                  </Button>\r\n                </div>\r\n                \r\n                <div className=\"overflow-x-auto\">\r\n                  <table className=\"w-full\">\r\n                    <thead>\r\n                      <tr className=\"border-b border-gray-200\">\r\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Order ID</th>\r\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Customer</th>\r\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Status</th>\r\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Total</th>\r\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Time</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {recentOrders.length > 0 ? (\r\n                        recentOrders.map((order) => (\r\n                          <tr key={order.id} className=\"border-b border-gray-100\">\r\n                            <td className=\"py-3 px-4\">#{order.id.slice(-4)}</td>\r\n                            <td className=\"py-3 px-4\">{order.customer_name}</td>\r\n                            <td className=\"py-3 px-4\">\r\n                              <span className={`px-2 py-1 text-xs rounded-full capitalize ${getStatusColor(order.status)}`}>\r\n                                {order.status}\r\n                              </span>\r\n                            </td>\r\n                            <td className=\"py-3 px-4\">{formatPesoSimple(parseFloat(order.total_amount))}</td>\r\n                            <td className=\"py-3 px-4\">{getTimeAgo(order.created_at)}</td>\r\n                          </tr>\r\n                        ))\r\n                      ) : (\r\n                        <tr>\r\n                          <td colSpan={5} className=\"py-8 text-center text-gray-500\">\r\n                            No orders found\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Notifications Panel */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Recent Activity</h2>\r\n              <div className=\"space-y-4\">\r\n                {notifications.slice(0, 5).map((notification) => (\r\n                  <div\r\n                    key={notification.id}\r\n                    className={`p-3 rounded-lg border cursor-pointer transition-colors ${\r\n                      notification.unread\r\n                        ? 'bg-orange-50 border-orange-200'\r\n                        : 'bg-gray-50 border-gray-200'\r\n                    }`}\r\n                    onClick={() => markNotificationRead(notification.id)}\r\n                  >\r\n                    <div className=\"flex items-start\">\r\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\r\n                        notification.type === 'new_order' ? 'bg-green-100' : 'bg-blue-100'\r\n                      }`}>\r\n                        <i className={`${\r\n                          notification.type === 'new_order' ? 'ri-shopping-bag-line text-green-600' : 'ri-refresh-line text-blue-600'\r\n                        } text-sm`}></i>\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <p className=\"text-sm font-medium text-gray-900\">{notification.message}</p>\r\n                        <p className=\"text-xs text-gray-600\">{notification.time}</p>\r\n                      </div>\r\n                      {notification.unread && (\r\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                {notifications.length === 0 && (\r\n                  <div className=\"text-center text-gray-500 py-8\">\r\n                    <i className=\"ri-notification-off-line text-2xl mb-2\"></i>\r\n                    <p className=\"text-sm\">No recent activity</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["AdminDashboard","navigate","useNavigate","user","isLoading","isAuthenticated","isAdmin","useAuth","stats","setStats","useState","recentOrders","setRecentOrders","notifications","setNotifications","showNotifications","setShowNotifications","loading","setLoading","useEffect","setupOrderNotifications","fetchDashboardData","subscription","supabase","payload","newOrder","notificationService","updatedOrder","oldOrder","orders","ordersError","foodItems","foodItemsError","today","todayOrders","order","pendingOrders","completedOrders","totalRevenue","sum","todaySales","recentNotifications","index","getTimeAgo","error","dateString","now","date","diffInMinutes","getStatusColor","status","markNotificationRead","id","notif","markAllNotificationsRead","jsxs","jsx","quickActions","AdminSidebar","n","notification","formatPesoSimple","action","Button"],"mappings":"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"}