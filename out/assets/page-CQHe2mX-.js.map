{"version":3,"file":"page-CQHe2mX-.js","sources":["../../src/pages/order-confirmation/page.tsx"],"sourcesContent":["\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { formatPesoSimple } from '../../lib/currency';\r\nimport Button from '../../components/base/Button';\r\nimport { useOrders } from '../../hooks/useOrders';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { supabase } from '../../lib/supabase';\r\n\r\n// Local interface for localStorage order data\r\ninterface LocalStorageOrder {\r\n  id: string;\r\n  items: any[];\r\n  total: number;\r\n  customerInfo: any;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n\r\n// Type for the order state (can be either localStorage format or database format)\r\ntype OrderData = LocalStorageOrder | {\r\n  id: string;\r\n  customer_name: string;\r\n  customer_email: string | null;\r\n  customer_phone: string;\r\n  customer_address: string | null;\r\n  order_type: 'delivery' | 'pickup';\r\n  payment_method: 'cash' | 'card' | 'online';\r\n  status: 'pending' | 'preparing' | 'ready' | 'out_for_delivery' | 'completed' | 'cancelled';\r\n  total_amount: number;\r\n  created_at: string;\r\n  order_items: any[];\r\n};\r\n\r\nconst OrderConfirmation = () => {\r\n  const { id: orderId } = useParams();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const [order, setOrder] = useState<OrderData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { orders, fetchOrders, getOrderById } = useOrders();\r\n\r\n  useEffect(() => {\r\n    const loadOrder = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // First, try to get from localStorage\r\n        const lastOrder = localStorage.getItem('lastOrder');\r\n        if (lastOrder) {\r\n          const orderData = JSON.parse(lastOrder) as LocalStorageOrder;\r\n          if (orderData.id === orderId) {\r\n            setOrder(orderData);\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Fallback: Try to fetch from database\r\n        if (orderId) {\r\n          try {\r\n            // For order confirmation, we need to fetch the order even without authentication\r\n            // This is like a receipt that should be accessible with just the order ID\r\n            let dbOrder = null;\r\n            \r\n            if (user) {\r\n              // If user is authenticated, use the normal method\r\n              dbOrder = await getOrderById(orderId);\r\n            } else {\r\n              // If not authenticated, we have a problem with RLS policies\r\n              // Let's try to get the current session and see if there's a user\r\n              const { data: { session } } = await supabase.auth.getSession();\r\n              \r\n              if (session?.user) {\r\n                // Try again with session user\r\n                dbOrder = await getOrderById(orderId);\r\n              } else {\r\n                setError('Unable to load order. Please try logging in or check if the order ID is correct.');\r\n              }\r\n            }\r\n            \r\n            if (dbOrder) {\r\n              setOrder(dbOrder);\r\n            } else {\r\n              setError('Order not found. This could be due to a processing error or the order may not have been created successfully.');\r\n            }\r\n          } catch (dbError) {\r\n            console.error('Error calling getOrderById:', dbError);\r\n            setError(`Database error: ${dbError instanceof Error ? dbError.message : 'Unknown error'}`);\r\n          }\r\n        } else {\r\n          setError('No order ID provided.');\r\n        }\r\n        \r\n        setLoading(false);\r\n\r\n      } catch (err) {\r\n        console.error('Error loading order:', err);\r\n        setError('Failed to load order information. Please try again or contact support.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (orderId) {\r\n      loadOrder();\r\n    }\r\n  }, [orderId, fetchOrders, orders]);\r\n\r\n  // Helper functions to handle both localStorage and database order formats\r\n  const isLocalStorageOrder = (order: OrderData): order is LocalStorageOrder => {\r\n    return 'items' in order && 'customerInfo' in order;\r\n  };\r\n\r\n  const getOrderTotal = (order: OrderData): number => {\r\n    return isLocalStorageOrder(order) ? order.total : order.total_amount;\r\n  };\r\n\r\n  const getOrderItems = (order: OrderData): any[] => {\r\n    return isLocalStorageOrder(order) ? order.items : order.order_items;\r\n  };\r\n\r\n  const getCustomerName = (order: OrderData): string => {\r\n    return isLocalStorageOrder(order) ? order.customerInfo.fullName : order.customer_name;\r\n  };\r\n\r\n  const getCustomerPhone = (order: OrderData): string => {\r\n    return isLocalStorageOrder(order) ? order.customerInfo.contactNumber : order.customer_phone;\r\n  };\r\n\r\n  const getOrderType = (order: OrderData): 'delivery' | 'pickup' => {\r\n    return isLocalStorageOrder(order) ? order.customerInfo.orderType : order.order_type;\r\n  };\r\n\r\n  const getPaymentMethod = (order: OrderData): string => {\r\n    return isLocalStorageOrder(order) ? order.customerInfo.paymentMethod : order.payment_method;\r\n  };\r\n\r\n  const getEstimatedTime = (order: OrderData): string => {\r\n    if (isLocalStorageOrder(order)) {\r\n      return order.customerInfo.deliveryMethod === 'delivery' ? '45-60 minutes' : '20-30 minutes';\r\n    } else {\r\n      return order.order_type === 'delivery' ? '45-60 minutes' : '20-30 minutes';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4\"></div>\r\n          <h2 className=\"text-xl font-semibold text-gray-800\">Loading your order...</h2>\r\n          <p className=\"text-gray-600 mt-2\">Checking localStorage and database...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !order) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center max-w-md mx-auto p-6\">\r\n          <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Order Not Found</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            {error || 'We couldn\\'t find your order. This might be due to a processing error.'}\r\n          </p>\r\n          <div className=\"space-y-3\">\r\n            <Button onClick={() => window.location.reload()} className=\"w-full\">\r\n              Try Again\r\n            </Button>\r\n            <Button onClick={() => navigate('/')} variant=\"outline\" className=\"w-full\">\r\n              Go Home\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!order) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Order not found</h2>\r\n          <Button onClick={() => navigate('/')}>Go Home</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const estimatedTime = getEstimatedTime(order);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 pb-20\">\r\n      <div className=\"bg-white shadow-sm\">\r\n        <div className=\"max-w-md mx-auto px-4 py-4\">\r\n          <h1 className=\"text-xl font-bold text-center\">Order Confirmed!</h1>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-md mx-auto px-4 py-6\">\r\n        {/* Success Message */}\r\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 mb-6 text-center\">\r\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n            <i className=\"ri-check-line text-2xl text-green-600\"></i>\r\n          </div>\r\n          <h2 className=\"text-xl font-bold text-green-800 mb-2\">Order Placed Successfully!</h2>\r\n          <p className=\"text-green-700\">Thank you for your order. We'll prepare it with care.</p>\r\n        </div>\r\n\r\n        {/* Order Details */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Order Details</h3>\r\n          <div className=\"space-y-2 mb-4\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-gray-600\">Order ID:</span>\r\n              <span className=\"font-medium\">#{order.id}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-gray-600\">Date:</span>\r\n              <span className=\"font-medium\">{new Date(isLocalStorageOrder(order) ? order.createdAt : order.created_at).toLocaleDateString()}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-gray-600\">Status:</span>\r\n              <span className=\"font-medium text-orange-600 capitalize\">{order.status}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-gray-600\">Delivery Method:</span>\r\n              <span className=\"font-medium capitalize\">{getOrderType(order)}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-gray-600\">Payment:</span>\r\n              <span className=\"font-medium capitalize\">{getPaymentMethod(order) === 'cash' ? \r\n                (getOrderType(order) === 'delivery' ? 'Cash on Delivery' : 'Pay on Pickup') : \r\n                getPaymentMethod(order)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Order Items */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Order Items</h3>\r\n          {getOrderItems(order).map((item, index) => {\r\n            // Handle different data structures for localStorage vs database orders\r\n            const itemName = isLocalStorageOrder(order) \r\n              ? item.name \r\n              : (item.food_items?.name || 'Unknown Item');\r\n            \r\n            const itemPrice = isLocalStorageOrder(order) \r\n              ? item.price \r\n              : item.unit_price;\r\n            \r\n            const itemQuantity = item.quantity;\r\n            const itemSizeName = item.size_name;\r\n            \r\n            return (\r\n              <div key={item.id || index} className=\"flex justify-between items-center py-2\">\r\n                <div>\r\n                  <p className=\"font-medium\">{itemName}</p>\r\n                  <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                    <span>Qty: {itemQuantity}</span>\r\n                    {itemSizeName && (\r\n                      <>\r\n                        <span>•</span>\r\n                        <span>Size: {itemSizeName}</span>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <p className=\"font-semibold\">{formatPesoSimple(itemPrice * itemQuantity)}</p>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className=\"border-t pt-2 mt-2\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <p className=\"text-lg font-bold\">Total</p>\r\n              <p className=\"text-lg font-bold text-orange-600\">{formatPesoSimple(getOrderTotal(order))}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Estimated Time */}\r\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\r\n          <div className=\"flex items-center\">\r\n            <i className=\"ri-time-line text-blue-600 mr-3\"></i>\r\n            <div>\r\n              <p className=\"font-semibold text-blue-800\">Estimated {getOrderType(order) === 'delivery' ? 'Delivery' : 'Pickup'} Time</p>\r\n              <p className=\"text-blue-700\">{estimatedTime}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Customer Info */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">Customer Information</h3>\r\n          <div className=\"space-y-2\">\r\n            <div>\r\n              <span className=\"text-gray-600\">Name: </span>\r\n              <span className=\"font-medium\">{getCustomerName(order)}</span>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-gray-600\">Contact: </span>\r\n              <span className=\"font-medium\">{getCustomerPhone(order)}</span>\r\n            </div>\r\n            {isLocalStorageOrder(order) && order.customerInfo.address && (\r\n              <div>\r\n                <span className=\"text-gray-600\">Address: </span>\r\n                <span className=\"font-medium\">{order.customerInfo.address}</span>\r\n              </div>\r\n            )}\r\n            {!isLocalStorageOrder(order) && order.customer_address && (\r\n              <div>\r\n                <span className=\"text-gray-600\">Address: </span>\r\n                <span className=\"font-medium\">{order.customer_address}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-3\">\r\n          <Button\r\n            onClick={() => navigate('/orders')}\r\n            className=\"w-full bg-orange-600 hover:bg-orange-700 text-white py-3 rounded-lg font-semibold whitespace-nowrap\"\r\n          >\r\n            View My Orders\r\n          </Button>\r\n          <Button\r\n            onClick={() => navigate('/')}\r\n            variant=\"outline\"\r\n            className=\"w-full border-gray-300 text-gray-700 py-3 rounded-lg font-semibold whitespace-nowrap\"\r\n          >\r\n            Continue Shopping\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderConfirmation;\r\n"],"names":["OrderConfirmation","orderId","useParams","navigate","useNavigate","user","useAuth","order","setOrder","useState","loading","setLoading","error","setError","orders","fetchOrders","getOrderById","useOrders","useEffect","lastOrder","orderData","dbOrder","session","supabase","dbError","err","isLocalStorageOrder","getOrderTotal","getOrderItems","getCustomerName","getCustomerPhone","getOrderType","getPaymentMethod","getEstimatedTime","jsxs","jsx","Button","estimatedTime","item","index","itemName","_a","itemPrice","itemQuantity","itemSizeName","Fragment","formatPesoSimple"],"mappings":"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"}