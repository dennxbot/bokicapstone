{"version":3,"file":"page-DS3AdWEC.js","sources":["../../src/pages/admin/customers/page.tsx"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../../hooks/useAuth';\r\nimport { formatPesoSimple } from '../../../lib/currency';\r\nimport { supabase } from '../../../lib/supabase';\r\nimport Button from '../../../components/base/Button';\r\nimport AdminSidebar from '../../../components/feature/AdminSidebar';\r\n\r\ninterface Customer {\r\n  id: string;\r\n  full_name: string;\r\n  email: string;\r\n  contact_number: string;\r\n  totalOrders: number;\r\n  totalSpent: number;\r\n  lastOrderDate: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface CustomerOrder {\r\n  id: string;\r\n  created_at: string;\r\n  total_amount: number;\r\n  status: string;\r\n  order_items: {\r\n    food_item: {\r\n      name: string;\r\n    };\r\n    quantity: number;\r\n    size_name?: string;\r\n  }[];\r\n}\r\n\r\nconst AdminCustomers = () => {\r\n  const navigate = useNavigate();\r\n  const { isLoading, isAuthenticated, isAdmin } = useAuth();\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\r\n  const [customerOrders, setCustomerOrders] = useState<CustomerOrder[]>([]);\r\n  const [showCustomerOrders, setShowCustomerOrders] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Wait for auth to load before checking\r\n    if (isLoading) return;\r\n\r\n    // If not authenticated or not admin, redirect to login\r\n    if (!isAuthenticated || !isAdmin) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    fetchCustomers();\r\n  }, [isAuthenticated, isAdmin, isLoading, navigate]);\r\n\r\n  const fetchCustomers = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch all users with their order statistics\r\n      const { data: users, error: usersError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .neq('role', 'admin')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (usersError) throw usersError;\r\n\r\n      // Fetch orders for each user to calculate statistics\r\n      const { data: orders, error: ordersError } = await supabase\r\n        .from('orders')\r\n        .select('user_id, total_amount, created_at, status');\r\n\r\n      if (ordersError) throw ordersError;\r\n\r\n      // Calculate customer statistics\r\n      const customersWithStats = users?.map(user => {\r\n        const userOrders = orders?.filter(order => order.user_id === user.id) || [];\r\n        const totalOrders = userOrders.length;\r\n        const totalSpent = userOrders.reduce((sum, order) => sum + parseFloat(order.total_amount || '0'), 0);\r\n        const lastOrder = userOrders.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\r\n\r\n        return {\r\n          id: user.id,\r\n          full_name: user.full_name,\r\n          email: user.email,\r\n          contact_number: user.contact_number || 'N/A',\r\n          totalOrders,\r\n          totalSpent,\r\n          lastOrderDate: lastOrder ? lastOrder.created_at : user.created_at,\r\n          created_at: user.created_at\r\n        };\r\n      }) || [];\r\n\r\n      setCustomers(customersWithStats);\r\n    } catch (error) {\r\n      console.error('Error fetching customers:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const viewCustomerOrders = async (customer: Customer) => {\r\n    try {\r\n      setSelectedCustomer(customer);\r\n      \r\n      // Fetch customer's orders with order items and food item details\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select(`\r\n          id,\r\n          created_at,\r\n          total_amount,\r\n          status,\r\n          order_items (\r\n            quantity,\r\n            size_name,\r\n            food_item:food_items (\r\n              name\r\n            )\r\n          )\r\n        `)\r\n        .eq('user_id', customer.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setCustomerOrders((orders as unknown as CustomerOrder[]) || []);\r\n      setShowCustomerOrders(true);\r\n    } catch (error) {\r\n      console.error('Error fetching customer orders:', error);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      case 'preparing': return 'bg-blue-100 text-blue-800';\r\n      case 'ready': return 'bg-purple-100 text-purple-800';\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  // Show loading while checking authentication\r\n  if (isLoading || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Don't render if not authenticated or not admin\r\n  if (!isAuthenticated || !isAdmin) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex\">\r\n      <AdminSidebar />\r\n      \r\n      <div className=\"flex-1 ml-64\">\r\n        <div className=\"bg-white shadow-sm border-b border-gray-200\">\r\n          <div className=\"px-6 py-4\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900\">Customer Management</h1>\r\n            <p className=\"text-gray-600\">Manage all customer information</p>\r\n          </div>\r\n        </div>\r\n\r\n        {showCustomerOrders && selectedCustomer ? (\r\n          <div className=\"p-6\">\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <div>\r\n                  <h2 className=\"text-xl font-bold\">{selectedCustomer.full_name}'s Orders</h2>\r\n                  <p className=\"text-gray-600\">{selectedCustomer.email}</p>\r\n                </div>\r\n                <Button\r\n                  onClick={() => setShowCustomerOrders(false)}\r\n                  variant=\"outline\"\r\n                  className=\"border-gray-300 text-gray-700 px-4 py-2 whitespace-nowrap\"\r\n                >\r\n                  Back to Customers\r\n                </Button>\r\n              </div>\r\n\r\n              <div className=\"space-y-4\">\r\n                {customerOrders.length > 0 ? (\r\n                  customerOrders.map((order) => (\r\n                    <div key={order.id} className=\"border border-gray-200 rounded-lg p-4\">\r\n                      <div className=\"flex justify-between items-start\">\r\n                        <div>\r\n                          <h3 className=\"font-semibold\">Order #{order.id.slice(-8)}</h3>\r\n                          <p className=\"text-sm text-gray-600 mb-2\">\r\n                            {new Date(order.created_at).toLocaleDateString()} at {new Date(order.created_at).toLocaleTimeString()}\r\n                          </p>\r\n                          <div className=\"space-y-1\">\r\n                            {order.order_items?.map((item, index) => (\r\n                              <p key={index} className=\"text-sm text-gray-700\">\r\n                                â€¢ {item.quantity}x {item.food_item?.name || 'Unknown Item'}\r\n                                {item.size_name && (\r\n                                  <span className=\"text-gray-500 ml-1\">({item.size_name})</span>\r\n                                )}\r\n                              </p>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <p className=\"font-bold text-orange-600\">{formatPesoSimple(order.total_amount)}</p>\r\n                          <span className={`px-2 py-1 text-xs rounded-full capitalize ${getStatusColor(order.status)}`}>\r\n                            {order.status}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"text-center py-8 text-gray-500\">\r\n                    <i className=\"ri-shopping-bag-line text-4xl mb-4\"></i>\r\n                    <p>No orders found for this customer</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"p-6\">\r\n            {/* Customer Stats */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4\">\r\n                    <i className=\"ri-user-line text-xl text-blue-600\"></i>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Total Customers</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900\">{customers.length}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\r\n                    <i className=\"ri-shopping-bag-line text-xl text-green-600\"></i>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Total Orders</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900\">\r\n                      {customers.reduce((sum, customer) => sum + customer.totalOrders, 0)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4\">\r\n                    <i className=\"ri-money-dollar-circle-line text-xl text-purple-600\"></i>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Total Revenue</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900\">\r\n                      {formatPesoSimple(customers.reduce((sum, customer) => sum + customer.totalSpent, 0))}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mr-4\">\r\n                    <i className=\"ri-user-star-line text-xl text-orange-600\"></i>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Avg Order Value</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900\">\r\n                      {customers.length > 0 && customers.reduce((sum, customer) => sum + customer.totalOrders, 0) > 0\r\n                        ? formatPesoSimple(customers.reduce((sum, customer) => sum + customer.totalSpent, 0) / \r\n                           customers.reduce((sum, customer) => sum + customer.totalOrders, 0))\r\n                        : formatPesoSimple(0)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Customers Table */}\r\n            <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n              <div className=\"p-6 border-b border-gray-200\">\r\n                <h2 className=\"text-lg font-semibold\">All Customers</h2>\r\n              </div>\r\n\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"w-full\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Customer</th>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Contact</th>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Orders</th>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Total Spent</th>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Last Order</th>\r\n                      <th className=\"text-left py-3 px-6 font-semibold text-gray-700\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {customers.length > 0 ? (\r\n                      customers.map((customer) => (\r\n                        <tr key={customer.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\r\n                          <td className=\"py-4 px-6\">\r\n                            <div>\r\n                              <h3 className=\"font-semibold text-gray-900\">{customer.full_name}</h3>\r\n                              <p className=\"text-sm text-gray-600\">{customer.email}</p>\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"py-4 px-6\">\r\n                            <div>\r\n                              <p className=\"text-sm text-gray-900\">{customer.contact_number}</p>\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"py-4 px-6\">\r\n                            <span className=\"font-semibold text-gray-900\">{customer.totalOrders}</span>\r\n                          </td>\r\n                          <td className=\"py-3 px-4\">{formatPesoSimple(customer.totalSpent)}</td>\r\n                          <td className=\"py-4 px-6\">\r\n                            <span className=\"text-sm text-gray-600\">\r\n                              {customer.totalOrders > 0 \r\n                                ? new Date(customer.lastOrderDate).toLocaleDateString()\r\n                                : 'No orders'\r\n                              }\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"py-4 px-6\">\r\n                            <Button\r\n                              onClick={() => viewCustomerOrders(customer)}\r\n                              className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 text-sm whitespace-nowrap\"\r\n                              disabled={customer.totalOrders === 0}\r\n                            >\r\n                              View Orders\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={6} className=\"py-8 text-center text-gray-500\">\r\n                          No customers found\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCustomers;\r\n"],"names":["AdminCustomers","navigate","useNavigate","isLoading","isAuthenticated","isAdmin","useAuth","customers","setCustomers","useState","selectedCustomer","setSelectedCustomer","customerOrders","setCustomerOrders","showCustomerOrders","setShowCustomerOrders","loading","setLoading","useEffect","fetchCustomers","users","usersError","supabase","orders","ordersError","customersWithStats","user","userOrders","order","totalOrders","totalSpent","sum","lastOrder","a","b","error","viewCustomerOrders","customer","getStatusColor","status","jsxs","jsx","AdminSidebar","Button","_a","item","index","formatPesoSimple"],"mappings":"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"}