{"version":3,"file":"useCart-4OqJo4WX.js","sources":["../../src/hooks/useCart.ts"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { useAuth } from './useAuth';\r\nimport type { FoodItem, CartItem } from '../types';\r\n\r\nexport const useCart = () => {\r\n  const [items, setItems] = useState<CartItem[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { user } = useAuth();\r\n\r\n  // Load cart when user changes\r\n  useEffect(() => {\r\n    if (user?.id) {\r\n      console.log('🔍 Loading cart for new user:', user.id);\r\n      loadCartFromDatabase();\r\n    } else {\r\n      console.log('📱 Loading cart from localStorage (no user)');\r\n      loadCartFromLocalStorage();\r\n    }\r\n  }, [user?.id]);\r\n\r\n  const loadCartFromLocalStorage = () => {\r\n    try {\r\n      const savedCart = localStorage.getItem('cart');\r\n      if (savedCart) {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        console.log('📱 Loaded from localStorage:', parsedCart);\r\n        setItems(parsedCart);\r\n      } else {\r\n        console.log('📱 No localStorage cart found');\r\n        setItems([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error loading from localStorage:', error);\r\n      setItems([]);\r\n    }\r\n  };\r\n\r\n  const loadCartFromDatabase = async () => {\r\n    if (!user?.id) {\r\n      console.log('❌ No user ID for database load');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      console.log('🔍 Querying database for user:', user.id);\r\n      \r\n      // 🔍 LOAD CART DEBUG\r\n      console.log('📥 Loading cart from database for user:', user.id);\r\n      \r\n      const { data: cartData, error } = await supabase\r\n        .from('cart_items')\r\n        .select(`\r\n          quantity,\r\n          size_option_id,\r\n          size_name,\r\n          size_multiplier,\r\n          food_items (\r\n            id,\r\n            name,\r\n            price,\r\n            image_url,\r\n            category_id,\r\n            description,\r\n            is_featured,\r\n            is_available,\r\n            preparation_time\r\n          )\r\n        `)\r\n        .eq('user_id', user.id);\r\n\r\n      if (error) {\r\n        console.error('❌ Database query error:', error);\r\n        loadCartFromLocalStorage();\r\n        return;\r\n      }\r\n\r\n      console.log('📊 Raw database result:', cartData);\r\n\r\n      if (!cartData || cartData.length === 0) {\r\n        console.log('✅ Empty cart for user - checking localStorage for migration');\r\n        // Check if there's a localStorage cart to migrate\r\n        const savedCart = localStorage.getItem('cart');\r\n        if (savedCart) {\r\n          const parsedCart = JSON.parse(savedCart);\r\n          if (parsedCart.length > 0) {\r\n            console.log('🔄 Migrating localStorage cart to database:', parsedCart);\r\n            await migrateCartToDatabase(parsedCart);\r\n            return;\r\n          }\r\n        }\r\n        console.log('✅ Setting empty cart for user');\r\n        setItems([]);\r\n        return;\r\n      }\r\n\r\n      // Process cart data - NOW USING SIZE COLUMNS FROM DATABASE\r\n      const processedItems: CartItem[] = cartData\r\n        .filter(item => item.food_items) // Filter out items with null food_items\r\n        .map(item => {\r\n          const foodItem = Array.isArray(item.food_items) ? item.food_items[0] : item.food_items;\r\n          \r\n          // Calculate price with size multiplier if available\r\n          const basePrice = foodItem.price;\r\n          const sizeMultiplier = item.size_multiplier || 1;\r\n          const finalPrice = basePrice * sizeMultiplier;\r\n          \r\n          // 🔍 DEBUG: Log each item being processed\r\n          console.log('🔄 Processing cart item:', {\r\n            foodItemName: foodItem.name,\r\n            basePrice: basePrice,\r\n            sizeMultiplier: sizeMultiplier,\r\n            finalPrice: finalPrice,\r\n            sizeName: item.size_name || 'Regular',\r\n            quantity: item.quantity\r\n          });\r\n          \r\n          return {\r\n            id: foodItem.id,\r\n            name: foodItem.name,\r\n            description: foodItem.description || '',\r\n            // Use calculated price with size multiplier\r\n            price: finalPrice,\r\n            image: foodItem.image_url || '',\r\n            category: foodItem.category_id || '',\r\n            featured: foodItem.is_featured || false,\r\n            available: foodItem.is_available || true,\r\n            quantity: item.quantity,\r\n            // Now using size information from database\r\n            size_option_id: item.size_option_id || undefined,\r\n            size_name: item.size_name || undefined,\r\n            size_multiplier: item.size_multiplier || undefined\r\n          };\r\n        });\r\n\r\n      console.log('✅ Processed cart items for user:', processedItems);\r\n      console.log('💰 Price verification:', processedItems.map(item => ({\r\n        name: item.name,\r\n        price: item.price,\r\n        note: 'Using original price - size info not available'\r\n      })));\r\n      setItems(processedItems);\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error loading cart from database:', error);\r\n      loadCartFromLocalStorage();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const migrateCartToDatabase = async (localCart: CartItem[]) => {\r\n    if (!user?.id || localCart.length === 0) return;\r\n\r\n    try {\r\n      console.log('🔄 Starting cart migration to database');\r\n      \r\n      // Clear any existing cart items for this user first\r\n      await supabase\r\n        .from('cart_items')\r\n        .delete()\r\n        .eq('user_id', user.id);\r\n\r\n      // Insert new cart items\r\n      const cartItemsToInsert = localCart.map(item => ({\r\n        user_id: user.id,\r\n        food_item_id: item.id,\r\n        quantity: item.quantity\r\n      }));\r\n\r\n      const { error } = await supabase\r\n        .from('cart_items')\r\n        .insert(cartItemsToInsert);\r\n\r\n      if (error) {\r\n        console.error('❌ Migration error:', error);\r\n        return;\r\n      }\r\n\r\n      console.log('✅ Cart migrated successfully');\r\n      setItems(localCart);\r\n      \r\n      // Clear localStorage after successful migration\r\n      localStorage.removeItem('cart');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Migration failed:', error);\r\n    }\r\n  };\r\n\r\n  const saveCartToDatabase = async (cartItems: CartItem[]) => {\r\n    if (!user?.id) {\r\n      console.log('📱 Saving to localStorage (no user)');\r\n      localStorage.setItem('cart', JSON.stringify(cartItems));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('💾 SAVING CART TO DATABASE - Debug Info:');\r\n      console.log('🛒 Cart Items to Save:', cartItems.map(item => ({\r\n        name: item.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        size_option_id: item.size_option_id,\r\n        size_name: item.size_name,\r\n        size_multiplier: item.size_multiplier\r\n      })));\r\n\r\n      // Clear existing cart items for this user\r\n      const { error: deleteError } = await supabase\r\n        .from('cart_items')\r\n        .delete()\r\n        .eq('user_id', user.id);\r\n\r\n      if (deleteError) {\r\n        console.error('❌ Error clearing existing cart:', deleteError);\r\n        localStorage.setItem('cart', JSON.stringify(cartItems));\r\n        return;\r\n      }\r\n\r\n      if (cartItems.length > 0) {\r\n        // Insert new cart items - NOW INCLUDING SIZE COLUMNS\r\n        const cartItemsToInsert = cartItems.map(item => ({\r\n          user_id: user.id,\r\n          food_item_id: item.id,\r\n          quantity: item.quantity,\r\n          size_option_id: item.size_option_id || null,\r\n          size_name: item.size_name || null,\r\n          size_multiplier: item.size_multiplier || 1\r\n        }));\r\n\r\n        console.log('📤 Database Insert Data (with size columns):', cartItemsToInsert);\r\n\r\n        const { error } = await supabase\r\n          .from('cart_items')\r\n          .insert(cartItemsToInsert);\r\n\r\n        if (error) {\r\n          console.error('❌ Error inserting cart items:', error);\r\n          localStorage.setItem('cart', JSON.stringify(cartItems));\r\n          return;\r\n        }\r\n      }\r\n\r\n      console.log('✅ Cart saved to database successfully (with size columns)');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error saving to database:', error);\r\n      localStorage.setItem('cart', JSON.stringify(cartItems));\r\n    }\r\n  };\r\n\r\n  const addToCart = async (item: FoodItem | CartItem, quantity: number = 1) => {\r\n    // 🛒 COMPREHENSIVE CART DEBUG LOGGING\r\n    console.log('='.repeat(60));\r\n    console.log('🛒 CART HOOK DEBUG - Adding Item to Cart');\r\n    console.log('='.repeat(60));\r\n    console.log('📦 Received Item:', {\r\n      name: item.name,\r\n      id: item.id,\r\n      price: item.price,\r\n      quantity: quantity\r\n    });\r\n    console.log('🔍 Full Item Data:', item);\r\n    console.log('🏷️ Size Information:', {\r\n      size_option_id: 'size_option_id' in item ? item.size_option_id : 'NOT_PROVIDED',\r\n      size_name: 'size_name' in item ? item.size_name : 'NOT_PROVIDED',\r\n      size_multiplier: 'size_multiplier' in item ? item.size_multiplier : 'NOT_PROVIDED'\r\n    });\r\n    \r\n    // Check if item already exists in cart with same size\r\n    const existingItemIndex = items.findIndex(cartItem => {\r\n      // For items with size information, match both id and size_option_id\r\n      if ('size_option_id' in item && item.size_option_id) {\r\n        return cartItem.id === item.id && cartItem.size_option_id === item.size_option_id;\r\n      }\r\n      // For items without size information, just match id\r\n      return cartItem.id === item.id;\r\n    });\r\n    \r\n    console.log('🔎 Existing Item Check:', {\r\n      existingItemIndex,\r\n      foundExisting: existingItemIndex !== -1,\r\n      currentCartItems: items.length\r\n    });\r\n    \r\n    let newItems: CartItem[];\r\n    \r\n    if (existingItemIndex !== -1) {\r\n      // Update existing item quantity\r\n      newItems = items.map((cartItem, index) =>\r\n        index === existingItemIndex\r\n          ? { ...cartItem, quantity: cartItem.quantity + quantity }\r\n          : cartItem\r\n      );\r\n      console.log('📈 UPDATED EXISTING ITEM - New quantity:', newItems[existingItemIndex].quantity);\r\n    } else {\r\n      // Add new item to cart, preserving all properties including size info and calculated price\r\n      const cartItem: CartItem = {\r\n        id: item.id,\r\n        name: item.name,\r\n        description: item.description,\r\n        price: item.price, // This will be the calculated price from size selection\r\n        image: 'image' in item ? item.image : (item as any).image_url || '',\r\n        category: 'category' in item ? item.category : (item as any).category_id || '',\r\n        featured: 'featured' in item ? item.featured : (item as any).is_featured || false,\r\n        available: 'available' in item ? item.available : (item as any).is_available || true,\r\n        quantity,\r\n        // Preserve size information if present\r\n        size_option_id: 'size_option_id' in item ? item.size_option_id : undefined,\r\n        size_name: 'size_name' in item ? item.size_name : undefined,\r\n        size_multiplier: 'size_multiplier' in item ? item.size_multiplier : undefined,\r\n      };\r\n      \r\n      console.log('➕ CREATING NEW CART ITEM:');\r\n      console.log('📋 Final Cart Item Object:', cartItem);\r\n      console.log('💰 Final Price in Cart Item:', cartItem.price);\r\n      console.log('🏷️ Final Size Info:', {\r\n        size_option_id: cartItem.size_option_id,\r\n        size_name: cartItem.size_name,\r\n        size_multiplier: cartItem.size_multiplier\r\n      });\r\n      \r\n      newItems = [...items, cartItem];\r\n    }\r\n    \r\n    console.log('📊 NEW CART STATE:');\r\n    console.log('🛒 Total Items:', newItems.length);\r\n    console.log('📝 All Cart Items:', newItems.map(item => ({\r\n      name: item.name,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n      size_name: item.size_name,\r\n      size_option_id: item.size_option_id\r\n    })));\r\n    console.log('='.repeat(60));\r\n    \r\n    // Update state immediately\r\n    setItems(newItems);\r\n    \r\n    // Save to database/localStorage\r\n    await saveCartToDatabase(newItems);\r\n  };\r\n\r\n  const removeFromCart = async (itemId: string, sizeOptionId?: string) => {\r\n    console.log('🗑️ Removing from cart:', itemId, 'size:', sizeOptionId);\r\n    \r\n    // Update state immediately - filter by both id and size_option_id if provided\r\n    const newItems = items.filter(item => {\r\n      if (sizeOptionId) {\r\n        return !(item.id === itemId && item.size_option_id === sizeOptionId);\r\n      }\r\n      return item.id !== itemId;\r\n    });\r\n    setItems(newItems);\r\n    \r\n    console.log('✅ Cart after removal:', newItems);\r\n    \r\n    // Remove from database immediately if user is logged in\r\n    if (user?.id) {\r\n      try {\r\n        console.log('🗑️ Deleting from database:', itemId);\r\n        const { error } = await supabase\r\n          .from('cart_items')\r\n          .delete()\r\n          .eq('user_id', user.id)\r\n          .eq('food_item_id', itemId);\r\n\r\n        if (error) {\r\n          console.error('❌ Error deleting from database:', error);\r\n          // If database deletion fails, still keep the local state updated\r\n          // but save the new state to ensure consistency\r\n          await saveCartToDatabase(newItems);\r\n        } else {\r\n          console.log('✅ Successfully deleted from database');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Database deletion error:', error);\r\n        // Fallback to full cart save\r\n        await saveCartToDatabase(newItems);\r\n      }\r\n    } else {\r\n      // Save to localStorage for non-logged-in users\r\n      localStorage.setItem('cart', JSON.stringify(newItems));\r\n    }\r\n  };\r\n\r\n  const updateQuantity = async (itemId: string, quantity: number, sizeOptionId?: string) => {\r\n    console.log('🔄 Updating quantity for:', itemId, 'to:', quantity, 'size:', sizeOptionId);\r\n    \r\n    if (quantity <= 0) {\r\n      await removeFromCart(itemId, sizeOptionId);\r\n      return;\r\n    }\r\n\r\n    const newItems = items.map(item => {\r\n      if (sizeOptionId) {\r\n        return (item.id === itemId && item.size_option_id === sizeOptionId) \r\n          ? { ...item, quantity } \r\n          : item;\r\n      }\r\n      return item.id === itemId ? { ...item, quantity } : item;\r\n    });\r\n    \r\n    console.log('✅ Cart after quantity update:', newItems);\r\n    \r\n    // Update state immediately\r\n    setItems(newItems);\r\n    \r\n    // Save to database/localStorage\r\n    await saveCartToDatabase(newItems);\r\n  };\r\n\r\n  const clearCart = async () => {\r\n    console.log('🧹 Clearing cart');\r\n    \r\n    // Update state immediately\r\n    setItems([]);\r\n    \r\n    if (user?.id) {\r\n      try {\r\n        const { error } = await supabase\r\n          .from('cart_items')\r\n          .delete()\r\n          .eq('user_id', user.id);\r\n          \r\n        if (error) {\r\n          console.error('❌ Error clearing cart from database:', error);\r\n        } else {\r\n          console.log('✅ Cart cleared from database');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error clearing cart from database:', error);\r\n      }\r\n    } else {\r\n      localStorage.removeItem('cart');\r\n      console.log('✅ Cart cleared from localStorage');\r\n    }\r\n  };\r\n\r\n  const getTotalPrice = () => {\r\n    return items.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n  };\r\n\r\n  const getTotalItems = () => {\r\n    return items.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n\r\n  const createOrder = async (orderData: {\r\n    customerName: string;\r\n    customerEmail: string;\r\n    customerPhone: string;\r\n    customerAddress: string;\r\n    orderType: 'delivery' | 'pickup';\r\n    paymentMethod: 'cash' | 'card';\r\n    userId: string;\r\n  }) => {\r\n    if (items.length === 0) {\r\n      throw new Error('Cart is empty');\r\n    }\r\n\r\n    try {\r\n      console.log('🚀 Starting order creation process...');\r\n      console.log('📦 Cart items:', items.length);\r\n      console.log('💰 Total price:', getTotalPrice());\r\n      console.log('👤 User ID:', orderData.userId);\r\n\r\n      // Set user context for RLS\r\n      console.log('🔐 Setting user context for RLS...');\r\n      const { error: contextError } = await supabase.rpc('set_user_context', { \r\n        user_id: orderData.userId, \r\n        user_role: user?.role || 'customer'\r\n      });\r\n\r\n      if (contextError) {\r\n        console.error('❌ RLS context error:', contextError);\r\n        throw contextError;\r\n      }\r\n\r\n      console.log('✅ User context set successfully');\r\n\r\n      // Create the order\r\n      console.log('📝 Creating order in database...');\r\n      const { data: order, error: orderError } = await supabase\r\n        .from('orders')\r\n        .insert({\r\n          user_id: orderData.userId,\r\n          customer_name: orderData.customerName,\r\n          customer_email: orderData.customerEmail,\r\n          customer_phone: orderData.customerPhone,\r\n          customer_address: orderData.customerAddress,\r\n          order_type: orderData.orderType,\r\n          payment_method: orderData.paymentMethod,\r\n          status: 'pending',\r\n          total_amount: getTotalPrice(),\r\n          notes: null\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (orderError) {\r\n        console.error('❌ Order creation error:', orderError);\r\n        throw orderError;\r\n      }\r\n\r\n      console.log('✅ Order created successfully:', order.id);\r\n\r\n      // Create order items with size information\r\n      console.log('📋 Creating order items...');\r\n      const orderItems = items.map(item => ({\r\n        order_id: order.id,\r\n        food_item_id: item.id,\r\n        quantity: item.quantity,\r\n        unit_price: item.price,\r\n        total_price: item.price * item.quantity,\r\n        size_option_id: item.size_option_id || null,\r\n        size_name: item.size_name || null,\r\n        size_multiplier: item.size_multiplier || null\r\n      }));\r\n\r\n      console.log('📋 Order items to insert:', orderItems.length);\r\n\r\n      const { error: itemsError } = await supabase\r\n        .from('order_items')\r\n        .insert(orderItems);\r\n\r\n      if (itemsError) {\r\n        console.error('❌ Order items creation error:', itemsError);\r\n        throw itemsError;\r\n      }\r\n\r\n      console.log('✅ Order items created successfully');\r\n\r\n      // Clear the cart after successful order\r\n      console.log('🧹 Clearing cart...');\r\n      await clearCart();\r\n\r\n      // Store order in localStorage for order confirmation page\r\n      console.log('💾 Storing order in localStorage...');\r\n      const orderForStorage = {\r\n        id: order.id,\r\n        items: items,\r\n        total: getTotalPrice(),\r\n        status: 'pending',\r\n        customerInfo: {\r\n          fullName: orderData.customerName,\r\n          contactNumber: orderData.customerPhone,\r\n          email: orderData.customerEmail,\r\n          address: orderData.customerAddress,\r\n          orderType: orderData.orderType,\r\n          paymentMethod: orderData.paymentMethod\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        estimatedTime: orderData.orderType === 'delivery' ? '30-45 minutes' : '15-20 minutes'\r\n      };\r\n\r\n      localStorage.setItem('lastOrder', JSON.stringify(orderForStorage));\r\n      console.log('✅ Order stored in localStorage');\r\n      console.log('🎉 Order creation completed successfully!');\r\n\r\n      return order;\r\n    } catch (error) {\r\n      console.error('❌ Error creating order:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    items,\r\n    isLoading,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getTotalPrice,\r\n    getTotalItems,\r\n    createOrder,\r\n  };\r\n};\r\n"],"names":["useCart","items","setItems","useState","isLoading","setIsLoading","user","useAuth","useEffect","loadCartFromDatabase","loadCartFromLocalStorage","savedCart","parsedCart","error","cartData","supabase","migrateCartToDatabase","processedItems","item","foodItem","basePrice","sizeMultiplier","finalPrice","localCart","cartItemsToInsert","saveCartToDatabase","cartItems","deleteError","addToCart","quantity","existingItemIndex","cartItem","newItems","index","removeFromCart","itemId","sizeOptionId","updateQuantity","clearCart","getTotalPrice","total","orderData","contextError","order","orderError","orderItems","itemsError","orderForStorage"],"mappings":"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"}