{"version":3,"file":"useSizes-DUu48KPE.js","sources":["../../src/hooks/useSizes.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from './useAuth';\nimport type { SizeOption, SizeWithPrice } from '../types';\n\nexport function useSizes() {\n  const { user } = useAuth();\n  const [sizeOptions, setSizeOptions] = useState<SizeOption[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch all active size options\n  const fetchSizeOptions = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data, error } = await supabase\n        .from('size_options')\n        .select('*')\n        .eq('is_active', true)\n        .order('sort_order');\n\n      if (error) throw error;\n      setSizeOptions(data || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch size options');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all size options (including inactive) - for admin use\n  const fetchAllSizeOptions = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data, error } = await supabase\n        .from('size_options')\n        .select('*')\n        .order('sort_order');\n\n      if (error) throw error;\n      setSizeOptions(data || []);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch all size options');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get available sizes for a specific food item\n  const getFoodItemSizes = async (foodItemId: string): Promise<SizeWithPrice[]> => {\n    try {\n      // First try to get the base price of the food item\n      const { data: foodItem, error: foodError } = await supabase\n        .from('food_items')\n        .select('price')\n        .eq('id', foodItemId)\n        .single();\n\n      if (foodError) {\n        console.error('Error fetching food item:', foodError);\n        throw foodError;\n      }\n\n      // Try to get sizes using RPC function\n      const { data, error } = await supabase.rpc('get_food_item_sizes', {\n        item_id: foodItemId\n      });\n\n      if (error) {\n        console.error('Error calling get_food_item_sizes RPC:', error);\n        // Fallback: try to get sizes directly from tables\n        const { data: sizesData, error: sizesError } = await supabase\n          .from('food_item_sizes')\n          .select(`\n            size_option_id,\n            is_available,\n            size_options (\n              id,\n              name,\n              description,\n              price_multiplier,\n              sort_order\n            )\n          `)\n          .eq('food_item_id', foodItemId)\n          .eq('is_available', true);\n\n        if (sizesError) {\n          console.error('Error fetching sizes directly:', sizesError);\n          throw sizesError;\n        }\n\n        // Transform the fallback data\n        return (sizesData || []).map((item: any) => ({\n          id: item.size_options.id,\n          size_option_id: item.size_options.id,\n          name: item.size_options.name,\n          description: item.size_options.description,\n          price_multiplier: item.size_options.price_multiplier,\n          calculated_price: Math.round(foodItem.price * item.size_options.price_multiplier * 100) / 100,\n          is_available: item.is_available,\n          sort_order: item.size_options.sort_order\n        })).sort((a, b) => a.sort_order - b.sort_order);\n      }\n\n      // Calculate prices for each size (RPC success path)\n      return (data || []).map((size: any) => ({\n        id: size.size_id,\n        size_option_id: size.size_id,\n        name: size.size_name,\n        description: size.size_description,\n        price_multiplier: size.price_multiplier,\n        calculated_price: Math.round(foodItem.price * size.price_multiplier * 100) / 100,\n        is_available: size.is_available,\n        sort_order: size.sort_order\n      }));\n    } catch (err) {\n      console.error('Error fetching food item sizes:', err);\n      return [];\n    }\n  };\n\n  // Create a new size option (admin only)\n  const createSizeOption = async (sizeData: Omit<SizeOption, 'id' | 'created_at' | 'updated_at'>) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { data, error } = await supabase\n        .from('size_options')\n        .insert([sizeData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Refresh the size options list\n      await fetchAllSizeOptions();\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create size option';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Update a size option (admin only)\n  const updateSizeOption = async (id: string, updates: Partial<SizeOption>) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { data, error } = await supabase\n        .from('size_options')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Refresh the size options list\n      await fetchAllSizeOptions();\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update size option';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Delete a size option (admin only)\n  const deleteSizeOption = async (id: string) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { error } = await supabase\n        .from('size_options')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n\n      // Refresh the size options list\n      await fetchAllSizeOptions();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete size option';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Assign a single size to a food item (admin only)\n  const assignSizeToFoodItem = async (foodItemId: string, sizeId: string) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const assignment = {\n        food_item_id: foodItemId,\n        size_option_id: sizeId,\n        is_available: true\n      };\n\n      const { error } = await supabase\n        .from('food_item_sizes')\n        .insert([assignment]);\n\n      if (error) throw error;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to assign size to food item';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Remove a size from a food item (admin only)\n  const removeSizeFromFoodItem = async (foodItemId: string, sizeId: string) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { error } = await supabase\n        .from('food_item_sizes')\n        .delete()\n        .eq('food_item_id', foodItemId)\n        .eq('size_option_id', sizeId);\n\n      if (error) throw error;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove size from food item';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Assign sizes to a food item (admin only)\n  const assignSizesToFoodItem = async (foodItemId: string, sizeIds: string[]) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      // Use upsert approach to handle existing assignments\n      // First, mark all existing sizes as unavailable\n      await supabase\n        .from('food_item_sizes')\n        .update({ is_available: false })\n        .eq('food_item_id', foodItemId);\n\n      // Then, upsert the selected sizes as available\n      if (sizeIds.length > 0) {\n        const assignments = sizeIds.map(sizeId => ({\n          food_item_id: foodItemId,\n          size_option_id: sizeId,\n          is_available: true\n        }));\n\n        // Use raw SQL with ON CONFLICT to handle duplicates properly\n        const { error } = await supabase.rpc('upsert_food_item_sizes', {\n          assignments: assignments\n        });\n\n        if (error) {\n          // Fallback to individual upserts if the RPC function doesn't exist\n          for (const assignment of assignments) {\n            const { error: upsertError } = await supabase\n              .from('food_item_sizes')\n              .upsert(assignment, { \n                onConflict: 'food_item_id,size_option_id',\n                ignoreDuplicates: false \n              });\n            \n            if (upsertError) throw upsertError;\n          }\n        }\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to assign sizes to food item';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Update food item size availability (admin only)\n  const updateFoodItemSizeAvailability = async (\n    foodItemId: string, \n    sizeId: string, \n    isAvailable: boolean\n  ) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { error } = await supabase\n        .from('food_item_sizes')\n        .update({ is_available: isAvailable })\n        .eq('food_item_id', foodItemId)\n        .eq('size_option_id', sizeId);\n\n      if (error) throw error;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update size availability';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Set custom price multiplier for a specific food item size (admin only)\n  const setCustomPriceMultiplier = async (\n    foodItemId: string,\n    sizeId: string,\n    customMultiplier: number | null\n  ) => {\n    try {\n      setError(null);\n\n      // Set user context for RLS if user is authenticated\n      if (user) {\n        await supabase.rpc('set_user_context', { \n          user_id: user.id, \n          user_role: user.role \n        });\n      }\n\n      const { error } = await supabase\n        .from('food_item_sizes')\n        .update({ custom_price_multiplier: customMultiplier })\n        .eq('food_item_id', foodItemId)\n        .eq('size_option_id', sizeId);\n\n      if (error) throw error;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to set custom price multiplier';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  // Calculate price with size\n  const calculatePriceWithSize = async (foodItemId: string, sizeId: string): Promise<number> => {\n    try {\n      const { data, error } = await supabase.rpc('calculate_item_price_with_size', {\n        item_id: foodItemId,\n        size_id: sizeId\n      });\n\n      if (error) throw error;\n      return data || 0;\n    } catch (err) {\n      console.error('Error calculating price with size:', err);\n      return 0;\n    }\n  };\n\n  useEffect(() => {\n    fetchSizeOptions();\n  }, []);\n\n  return {\n    sizeOptions,\n    isLoading,\n    error,\n    fetchSizeOptions,\n    fetchAllSizeOptions,\n    getFoodItemSizes,\n    createSizeOption,\n    updateSizeOption,\n    deleteSizeOption,\n    assignSizeToFoodItem,\n    removeSizeFromFoodItem,\n    assignSizesToFoodItem,\n    updateFoodItemSizeAvailability,\n    setCustomPriceMultiplier,\n    calculatePriceWithSize\n  };\n}"],"names":["useSizes","user","useAuth","sizeOptions","setSizeOptions","useState","isLoading","setIsLoading","error","setError","fetchSizeOptions","data","supabase","err","fetchAllSizeOptions","getFoodItemSizes","foodItemId","foodItem","foodError","sizesData","sizesError","item","a","b","size","createSizeOption","sizeData","errorMessage","updateSizeOption","id","updates","deleteSizeOption","assignSizeToFoodItem","sizeId","assignment","removeSizeFromFoodItem","assignSizesToFoodItem","sizeIds","assignments","upsertError","updateFoodItemSizeAvailability","isAvailable","setCustomPriceMultiplier","customMultiplier","calculatePriceWithSize","useEffect"],"mappings":"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"}