{"version":3,"file":"useAddresses-Dc5xVLle.js","sources":["../../src/hooks/useAddresses.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from './useAuth';\n\nexport interface UserAddress {\n  id: string;\n  user_id: string;\n  label: string;\n  address_line_1: string;\n  address_line_2?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  country: string;\n  is_default: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAddressData {\n  label: string;\n  address_line_1: string;\n  address_line_2?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  country?: string;\n  is_default?: boolean;\n}\n\nexport interface UpdateAddressData extends Partial<CreateAddressData> {\n  id: string;\n}\n\nexport const useAddresses = () => {\n  const { user } = useAuth();\n  const [addresses, setAddresses] = useState<UserAddress[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Helper function to set user context for RLS policies\n  const setUserContext = useCallback(async () => {\n    if (!user) return;\n    \n    try {\n      await supabase.rpc('set_user_context', {\n        user_id: user.id,\n        user_role: user.role\n      });\n    } catch (error) {\n      console.error('Error setting user context:', error);\n    }\n  }, [user]);\n\n  // Load user addresses\n  const loadAddresses = useCallback(async () => {\n    if (!user) {\n      setAddresses([]);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Set user context for RLS policies\n      await setUserContext();\n\n      const { data, error: fetchError } = await supabase\n        .from('user_addresses')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (fetchError) {\n        throw fetchError;\n      }\n\n      setAddresses(data || []);\n    } catch (err) {\n      console.error('Error loading addresses:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to load addresses';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, setUserContext]);\n\n  // Create new address\n  const createAddress = useCallback(async (addressData: CreateAddressData): Promise<UserAddress> => {\n    if (!user) {\n      throw new Error('User must be logged in to create address');\n    }\n\n    try {\n      setError(null);\n\n      // Set user context for RLS policies\n      await setUserContext();\n\n      // The database trigger will automatically handle default address logic\n      const { data, error: createError } = await supabase\n        .from('user_addresses')\n        .insert({\n          user_id: user.id,\n          label: addressData.label,\n          address_line_1: addressData.address_line_1,\n          address_line_2: addressData.address_line_2,\n          city: addressData.city,\n          state: addressData.state,\n          postal_code: addressData.postal_code,\n          country: addressData.country || 'Philippines',\n          is_default: addressData.is_default || false,\n        })\n        .select()\n        .single();\n\n      if (createError) {\n        throw createError;\n      }\n\n      // Reload addresses to get updated list\n      await loadAddresses();\n      \n      return data;\n    } catch (err) {\n      console.error('Error creating address:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create address';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [user, loadAddresses, setUserContext]);\n\n  // Update existing address\n  const updateAddress = useCallback(async (addressData: UpdateAddressData): Promise<UserAddress> => {\n    if (!user) {\n      throw new Error('User must be logged in to update address');\n    }\n\n    try {\n      setError(null);\n\n      // Set user context for RLS policies\n      await setUserContext();\n\n      // The database trigger will automatically handle default address logic\n      const { data, error: updateError } = await supabase\n        .from('user_addresses')\n        .update({\n          label: addressData.label,\n          address_line_1: addressData.address_line_1,\n          address_line_2: addressData.address_line_2,\n          city: addressData.city,\n          state: addressData.state,\n          postal_code: addressData.postal_code,\n          country: addressData.country,\n          is_default: addressData.is_default,\n        })\n        .eq('id', addressData.id)\n        .eq('user_id', user.id)\n        .select()\n        .single();\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      // Reload addresses to get updated list\n      await loadAddresses();\n      \n      return data;\n    } catch (err) {\n      console.error('Error updating address:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update address';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [user, loadAddresses, setUserContext]);\n\n  // Delete address\n  const deleteAddress = useCallback(async (addressId: string): Promise<void> => {\n    if (!user) {\n      throw new Error('User must be logged in to delete address');\n    }\n\n    try {\n      setError(null);\n\n      // Set user context for RLS policies\n      await setUserContext();\n\n      const { error: deleteError } = await supabase\n        .from('user_addresses')\n        .delete()\n        .eq('id', addressId)\n        .eq('user_id', user.id);\n\n      if (deleteError) {\n        throw deleteError;\n      }\n\n      // Reload addresses to get updated list\n      await loadAddresses();\n    } catch (err) {\n      console.error('Error deleting address:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete address';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [user, loadAddresses, setUserContext]);\n\n  // Set default address\n  const setDefaultAddress = useCallback(async (addressId: string): Promise<void> => {\n    if (!user) {\n      throw new Error('User must be logged in to set default address');\n    }\n\n    try {\n      setError(null);\n\n      // Set user context for RLS policies\n      await setUserContext();\n\n      // Get all addresses to understand current state\n      const { data: allAddresses } = await supabase\n        .from('user_addresses')\n        .select('*')\n        .eq('user_id', user.id);\n\n      if (!allAddresses) {\n        throw new Error('Could not fetch addresses');\n      }\n\n      const targetAddress = allAddresses.find(addr => addr.id === addressId);\n      if (!targetAddress) {\n        throw new Error('Target address not found');\n      }\n\n      // If target is already default, nothing to do\n      if (targetAddress.is_default) {\n        return;\n      }\n\n      // SOLUTION: Use the RPC function if available, otherwise use a workaround\n      // First try the RPC function\n      const { error: rpcError } = await supabase.rpc('set_default_address', {\n        p_user_id: user.id,\n        p_address_id: addressId\n      });\n\n      if (!rpcError) {\n        // RPC function worked, we're done\n        await loadAddresses();\n        return;\n      }\n\n      // RPC function failed, use workaround approach\n      console.log('RPC function not available, using workaround approach');\n\n      // Workaround: Update addresses one by one in the correct order\n      // First, update all OTHER addresses to false (excluding target)\n      const otherAddresses = allAddresses.filter(addr => addr.id !== addressId);\n      \n      for (const addr of otherAddresses) {\n        if (addr.is_default) {\n          const { error: clearError } = await supabase\n            .from('user_addresses')\n            .update({ is_default: false })\n            .eq('id', addr.id)\n            .eq('user_id', user.id);\n\n          if (clearError) {\n            console.error('Error clearing default for address:', addr.id, clearError);\n            // Continue with other addresses even if one fails\n          }\n          \n          // Small delay to let the database process\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n      }\n\n      // Now set the target as default\n      const { error: updateError } = await supabase\n        .from('user_addresses')\n        .update({ is_default: true })\n        .eq('id', addressId)\n        .eq('user_id', user.id);\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      // Reload addresses to get updated list\n      await loadAddresses();\n    } catch (err) {\n      console.error('Error setting default address:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to set default address';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [user, loadAddresses, setUserContext]);\n\n  // Get default address\n  const getDefaultAddress = useCallback((): UserAddress | null => {\n    return addresses.find(addr => addr.is_default) || null;\n  }, [addresses]);\n\n  // Format address for display\n  const formatAddress = useCallback((address: UserAddress): string => {\n    const parts = [\n      address.address_line_1,\n      address.address_line_2,\n      address.city,\n      address.state,\n      address.postal_code,\n    ].filter(Boolean);\n    \n    return parts.join(', ');\n  }, []);\n\n  // Load addresses when user changes\n  useEffect(() => {\n    loadAddresses();\n  }, [loadAddresses]);\n\n  return {\n    addresses,\n    isLoading,\n    error,\n    loadAddresses,\n    createAddress,\n    updateAddress,\n    deleteAddress,\n    setDefaultAddress,\n    getDefaultAddress,\n    formatAddress,\n  };\n};"],"names":["useAddresses","user","useAuth","addresses","setAddresses","useState","isLoading","setIsLoading","error","setError","setUserContext","useCallback","supabase","loadAddresses","data","fetchError","err","errorMessage","createAddress","addressData","createError","updateAddress","updateError","deleteAddress","addressId","deleteError","setDefaultAddress","allAddresses","targetAddress","addr","rpcError","otherAddresses","clearError","resolve","getDefaultAddress","formatAddress","address","useEffect"],"mappings":"yFAkCO,MAAMA,EAAe,IAAM,CAChC,KAAM,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAACC,EAAWC,CAAY,EAAIC,EAAAA,SAAwB,CAAA,CAAE,EACtD,CAACC,EAAWC,CAAY,EAAIF,EAAAA,SAAS,EAAK,EAC1C,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAwB,IAAI,EAGhDK,EAAiBC,EAAAA,YAAY,SAAY,CAC7C,GAAKV,EAEL,GAAI,CACF,MAAMW,EAAS,IAAI,mBAAoB,CACrC,QAASX,EAAK,GACd,UAAWA,EAAK,IAAA,CACjB,CACH,OAASO,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,CACpD,CACF,EAAG,CAACP,CAAI,CAAC,EAGHY,EAAgBF,EAAAA,YAAY,SAAY,CAC5C,GAAI,CAACV,EAAM,CACTG,EAAa,CAAA,CAAE,EACf,MACF,CAEA,GAAI,CACFG,EAAa,EAAI,EACjBE,EAAS,IAAI,EAGb,MAAMC,EAAA,EAEN,KAAM,CAAE,KAAAI,EAAM,MAAOC,CAAA,EAAe,MAAMH,EACvC,KAAK,gBAAgB,EACrB,OAAO,GAAG,EACV,GAAG,UAAWX,EAAK,EAAE,EACrB,MAAM,aAAc,CAAE,UAAW,GAAO,EAE3C,GAAIc,EACF,MAAMA,EAGRX,EAAaU,GAAQ,EAAE,CACzB,OAASE,EAAK,CACZ,QAAQ,MAAM,2BAA4BA,CAAG,EAC7C,MAAMC,EAAeD,aAAe,MAAQA,EAAI,QAAU,2BAC1DP,EAASQ,CAAY,CACvB,QAAA,CACEV,EAAa,EAAK,CACpB,CACF,EAAG,CAACN,EAAMS,CAAc,CAAC,EAGnBQ,EAAgBP,cAAY,MAAOQ,GAAyD,CAChG,GAAI,CAAClB,EACH,MAAM,IAAI,MAAM,0CAA0C,EAG5D,GAAI,CACFQ,EAAS,IAAI,EAGb,MAAMC,EAAA,EAGN,KAAM,CAAE,KAAAI,EAAM,MAAOM,CAAA,EAAgB,MAAMR,EACxC,KAAK,gBAAgB,EACrB,OAAO,CACN,QAASX,EAAK,GACd,MAAOkB,EAAY,MACnB,eAAgBA,EAAY,eAC5B,eAAgBA,EAAY,eAC5B,KAAMA,EAAY,KAClB,MAAOA,EAAY,MACnB,YAAaA,EAAY,YACzB,QAASA,EAAY,SAAW,cAChC,WAAYA,EAAY,YAAc,EAAA,CACvC,EACA,OAAA,EACA,OAAA,EAEH,GAAIC,EACF,MAAMA,EAIR,aAAMP,EAAA,EAECC,CACT,OAASE,EAAK,CACZ,QAAQ,MAAM,0BAA2BA,CAAG,EAC5C,MAAMC,EAAeD,aAAe,MAAQA,EAAI,QAAU,2BAC1D,MAAAP,EAASQ,CAAY,EACf,IAAI,MAAMA,CAAY,CAC9B,CACF,EAAG,CAAChB,EAAMY,EAAeH,CAAc,CAAC,EAGlCW,EAAgBV,cAAY,MAAOQ,GAAyD,CAChG,GAAI,CAAClB,EACH,MAAM,IAAI,MAAM,0CAA0C,EAG5D,GAAI,CACFQ,EAAS,IAAI,EAGb,MAAMC,EAAA,EAGN,KAAM,CAAE,KAAAI,EAAM,MAAOQ,CAAA,EAAgB,MAAMV,EACxC,KAAK,gBAAgB,EACrB,OAAO,CACN,MAAOO,EAAY,MACnB,eAAgBA,EAAY,eAC5B,eAAgBA,EAAY,eAC5B,KAAMA,EAAY,KAClB,MAAOA,EAAY,MACnB,YAAaA,EAAY,YACzB,QAASA,EAAY,QACrB,WAAYA,EAAY,UAAA,CACzB,EACA,GAAG,KAAMA,EAAY,EAAE,EACvB,GAAG,UAAWlB,EAAK,EAAE,EACrB,OAAA,EACA,OAAA,EAEH,GAAIqB,EACF,MAAMA,EAIR,aAAMT,EAAA,EAECC,CACT,OAASE,EAAK,CACZ,QAAQ,MAAM,0BAA2BA,CAAG,EAC5C,MAAMC,EAAeD,aAAe,MAAQA,EAAI,QAAU,2BAC1D,MAAAP,EAASQ,CAAY,EACf,IAAI,MAAMA,CAAY,CAC9B,CACF,EAAG,CAAChB,EAAMY,EAAeH,CAAc,CAAC,EAGlCa,EAAgBZ,cAAY,MAAOa,GAAqC,CAC5E,GAAI,CAACvB,EACH,MAAM,IAAI,MAAM,0CAA0C,EAG5D,GAAI,CACFQ,EAAS,IAAI,EAGb,MAAMC,EAAA,EAEN,KAAM,CAAE,MAAOe,CAAA,EAAgB,MAAMb,EAClC,KAAK,gBAAgB,EACrB,OAAA,EACA,GAAG,KAAMY,CAAS,EAClB,GAAG,UAAWvB,EAAK,EAAE,EAExB,GAAIwB,EACF,MAAMA,EAIR,MAAMZ,EAAA,CACR,OAASG,EAAK,CACZ,QAAQ,MAAM,0BAA2BA,CAAG,EAC5C,MAAMC,EAAeD,aAAe,MAAQA,EAAI,QAAU,2BAC1D,MAAAP,EAASQ,CAAY,EACf,IAAI,MAAMA,CAAY,CAC9B,CACF,EAAG,CAAChB,EAAMY,EAAeH,CAAc,CAAC,EAGlCgB,EAAoBf,cAAY,MAAOa,GAAqC,CAChF,GAAI,CAACvB,EACH,MAAM,IAAI,MAAM,+CAA+C,EAGjE,GAAI,CACFQ,EAAS,IAAI,EAGb,MAAMC,EAAA,EAGN,KAAM,CAAE,KAAMiB,CAAA,EAAiB,MAAMf,EAClC,KAAK,gBAAgB,EACrB,OAAO,GAAG,EACV,GAAG,UAAWX,EAAK,EAAE,EAExB,GAAI,CAAC0B,EACH,MAAM,IAAI,MAAM,2BAA2B,EAG7C,MAAMC,EAAgBD,EAAa,KAAKE,GAAQA,EAAK,KAAOL,CAAS,EACrE,GAAI,CAACI,EACH,MAAM,IAAI,MAAM,0BAA0B,EAI5C,GAAIA,EAAc,WAChB,OAKF,KAAM,CAAE,MAAOE,CAAA,EAAa,MAAMlB,EAAS,IAAI,sBAAuB,CACpE,UAAWX,EAAK,GAChB,aAAcuB,CAAA,CACf,EAED,GAAI,CAACM,EAAU,CAEb,MAAMjB,EAAA,EACN,MACF,CAGA,QAAQ,IAAI,uDAAuD,EAInE,MAAMkB,EAAiBJ,EAAa,OAAOE,GAAQA,EAAK,KAAOL,CAAS,EAExE,UAAWK,KAAQE,EACjB,GAAIF,EAAK,WAAY,CACnB,KAAM,CAAE,MAAOG,CAAA,EAAe,MAAMpB,EACjC,KAAK,gBAAgB,EACrB,OAAO,CAAE,WAAY,EAAA,CAAO,EAC5B,GAAG,KAAMiB,EAAK,EAAE,EAChB,GAAG,UAAW5B,EAAK,EAAE,EAEpB+B,GACF,QAAQ,MAAM,sCAAuCH,EAAK,GAAIG,CAAU,EAK1E,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,EAAE,CAAC,CACtD,CAIF,KAAM,CAAE,MAAOX,GAAgB,MAAMV,EAClC,KAAK,gBAAgB,EACrB,OAAO,CAAE,WAAY,GAAM,EAC3B,GAAG,KAAMY,CAAS,EAClB,GAAG,UAAWvB,EAAK,EAAE,EAExB,GAAIqB,EACF,MAAMA,EAIR,MAAMT,EAAA,CACR,OAASG,EAAK,CACZ,QAAQ,MAAM,iCAAkCA,CAAG,EACnD,MAAMC,EAAeD,aAAe,MAAQA,EAAI,QAAU,gCAC1D,MAAAP,EAASQ,CAAY,EACf,IAAI,MAAMA,CAAY,CAC9B,CACF,EAAG,CAAChB,EAAMY,EAAeH,CAAc,CAAC,EAGlCwB,EAAoBvB,EAAAA,YAAY,IAC7BR,EAAU,KAAK0B,GAAQA,EAAK,UAAU,GAAK,KACjD,CAAC1B,CAAS,CAAC,EAGRgC,EAAgBxB,cAAayB,GACnB,CACZA,EAAQ,eACRA,EAAQ,eACRA,EAAQ,KACRA,EAAQ,MACRA,EAAQ,WAAA,EACR,OAAO,OAAO,EAEH,KAAK,IAAI,EACrB,CAAA,CAAE,EAGLC,OAAAA,EAAAA,UAAU,IAAM,CACdxB,EAAA,CACF,EAAG,CAACA,CAAa,CAAC,EAEX,CACL,UAAAV,EACA,UAAAG,EACA,MAAAE,EACA,cAAAK,EACA,cAAAK,EACA,cAAAG,EACA,cAAAE,EACA,kBAAAG,EACA,kBAAAQ,EACA,cAAAC,CAAA,CAEJ"}