import{r as p}from"./index-rA_UgCij.js";import{u as A,s}from"./useAuth-CjWk1XML.js";function D(){const{user:i}=A(),[w,u]=p.useState([]),[z,l]=p.useState(!1),[h,a]=p.useState(null),m=async()=>{try{l(!0),a(null);const{data:t,error:r}=await s.from("size_options").select("*").eq("is_active",!0).order("sort_order");if(r)throw r;u(t||[])}catch(t){a(t instanceof Error?t.message:"Failed to fetch size options")}finally{l(!1)}},d=async()=>{try{l(!0),a(null);const{data:t,error:r}=await s.from("size_options").select("*").order("sort_order");if(r)throw r;u(t||[])}catch(t){a(t instanceof Error?t.message:"Failed to fetch all size options")}finally{l(!1)}},g=async t=>{try{const{data:r,error:e}=await s.from("food_items").select("price").eq("id",t).single();if(e)throw console.error("Error fetching food item:",e),e;const{data:o,error:c}=await s.rpc("get_food_item_sizes",{item_id:t});if(c){console.error("Error calling get_food_item_sizes RPC:",c);const{data:n,error:f}=await s.from("food_item_sizes").select(`
            size_option_id,
            is_available,
            size_options (
              id,
              name,
              description,
              price_multiplier,
              sort_order
            )
          `).eq("food_item_id",t).eq("is_available",!0);if(f)throw console.error("Error fetching sizes directly:",f),f;return(n||[]).map(_=>({id:_.size_options.id,size_option_id:_.size_options.id,name:_.size_options.name,description:_.size_options.description,price_multiplier:_.size_options.price_multiplier,calculated_price:Math.round(r.price*_.size_options.price_multiplier*100)/100,is_available:_.is_available,sort_order:_.size_options.sort_order})).sort((_,O)=>_.sort_order-O.sort_order)}return(o||[]).map(n=>({id:n.size_id,size_option_id:n.size_id,name:n.size_name,description:n.size_description,price_multiplier:n.price_multiplier,calculated_price:Math.round(r.price*n.price_multiplier*100)/100,is_available:n.is_available,sort_order:n.sort_order}))}catch(r){return console.error("Error fetching food item sizes:",r),[]}},y=async t=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{data:r,error:e}=await s.from("size_options").insert([t]).select().single();if(e)throw e;return await d(),r}catch(r){const e=r instanceof Error?r.message:"Failed to create size option";throw a(e),new Error(e)}},E=async(t,r)=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{data:e,error:o}=await s.from("size_options").update(r).eq("id",t).select().single();if(o)throw o;return await d(),e}catch(e){const o=e instanceof Error?e.message:"Failed to update size option";throw a(o),new Error(o)}},F=async t=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{error:r}=await s.from("size_options").delete().eq("id",t);if(r)throw r;await d()}catch(r){const e=r instanceof Error?r.message:"Failed to delete size option";throw a(e),new Error(e)}},S=async(t,r)=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const e={food_item_id:t,size_option_id:r,is_available:!0},{error:o}=await s.from("food_item_sizes").insert([e]);if(o)throw o}catch(e){const o=e instanceof Error?e.message:"Failed to assign size to food item";throw a(o),new Error(o)}},v=async(t,r)=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{error:e}=await s.from("food_item_sizes").delete().eq("food_item_id",t).eq("size_option_id",r);if(e)throw e}catch(e){const o=e instanceof Error?e.message:"Failed to remove size from food item";throw a(o),new Error(o)}},b=async(t,r)=>{try{if(a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role}),await s.from("food_item_sizes").update({is_available:!1}).eq("food_item_id",t),r.length>0){const e=r.map(c=>({food_item_id:t,size_option_id:c,is_available:!0})),{error:o}=await s.rpc("upsert_food_item_sizes",{assignments:e});if(o)for(const c of e){const{error:n}=await s.from("food_item_sizes").upsert(c,{onConflict:"food_item_id,size_option_id",ignoreDuplicates:!1});if(n)throw n}}}catch(e){const o=e instanceof Error?e.message:"Failed to assign sizes to food item";throw a(o),new Error(o)}},q=async(t,r,e)=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{error:o}=await s.from("food_item_sizes").update({is_available:e}).eq("food_item_id",t).eq("size_option_id",r);if(o)throw o}catch(o){const c=o instanceof Error?o.message:"Failed to update size availability";throw a(c),new Error(c)}},M=async(t,r,e)=>{try{a(null),i&&await s.rpc("set_user_context",{user_id:i.id,user_role:i.role});const{error:o}=await s.from("food_item_sizes").update({custom_price_multiplier:e}).eq("food_item_id",t).eq("size_option_id",r);if(o)throw o}catch(o){const c=o instanceof Error?o.message:"Failed to set custom price multiplier";throw a(c),new Error(c)}},x=async(t,r)=>{try{const{data:e,error:o}=await s.rpc("calculate_item_price_with_size",{item_id:t,size_id:r});if(o)throw o;return e||0}catch(e){return console.error("Error calculating price with size:",e),0}};return p.useEffect(()=>{m()},[]),{sizeOptions:w,isLoading:z,error:h,fetchSizeOptions:m,fetchAllSizeOptions:d,getFoodItemSizes:g,createSizeOption:y,updateSizeOption:E,deleteSizeOption:F,assignSizeToFoodItem:S,removeSizeFromFoodItem:v,assignSizesToFoodItem:b,updateFoodItemSizeAvailability:q,setCustomPriceMultiplier:M,calculatePriceWithSize:x}}export{D as u};
//# sourceMappingURL=useSizes-DUu48KPE.js.map
